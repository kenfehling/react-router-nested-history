import Step from './Step'
import {diffPagesToSteps} from '../util/reconciler'
import Action from '../store/Action'
import State from './State'
import Serializable from '../store/decorators/Serializable'

abstract class BaseAction extends Action {
  abstract readonly type: string
  readonly time: number
  readonly origin: Origin

  constructor({time=new Date().getTime(), origin=USER}:
              {time?:number, origin?:Origin}={}) {
    super({time})
    this.origin = origin
  }

  /**
   * Generate steps to run in the browser
   * @param steps - The original steps before this action runs
   * @param state - The original state before this action runs
   * @returns {Step[]} - The original steps plus steps generated by this action
   */
  addSteps(steps:Step[], state:State):Step[] {
    const newState:State = this.reduce(state)
    return [
      ...steps,
      ...diffPagesToSteps(
        state.pages,
        newState.pages
      )
    ]
  }
}

export interface Origin {}

@Serializable
export class SystemOrigin implements Origin {
  static type:string = 'system'
  type:string = SystemOrigin.type
}

@Serializable
export class UserOrigin implements Origin {
  static type:string = 'user'
  type:string = UserOrigin.type
}

@Serializable
export class ActionOrigin implements Origin {
  static type:string = 'action'
  type:string = ActionOrigin.type
  readonly action: BaseAction
  constructor(action:BaseAction) {
    this.action = action
  }
}

export const SYSTEM = new SystemOrigin()
export const USER = new UserOrigin()

export default BaseAction