import IState from './IState'
import Comparable from './interfaces/Comparable'
import Step from './interfaces/Step'
import {diffStateToSteps} from '../util/reconciler'
import {ISerializable} from '../util/serializer'

abstract class Action implements Comparable, ISerializable {
  abstract readonly type: string
  readonly time: number

  constructor({time=new Date().getTime()}:{time?:number}={}) {
    this.time = time
  }

  updateAfterRefresh<A extends Action>(time:number):A {
    return this.constructor({...Object(this), time}) as A
  }

  /**
   * Reducer for this action
   * @param state - The original state
   * @returns {IState} - The new state
   */
  reduce(state:IState):IState {
    return state
  }

  /**
   * Reducer for the store, typically used for just storing this action
   * but can be overridden to do things like clear some or all of the actions
   */
  store(actions:Action[]):Action[] {
    return [...actions, this]
  }

  /**
   * Generate steps to run in the browser
   * @param steps - The original steps before this action runs
   * @param state - The original state before this action runs
   * @returns {Step[]} - The original steps plus steps generated by this action
   */
  addSteps(steps:Step[], state:IState):Step[] {
    const newState:IState = this.reduce(state)
    return [...steps, ...diffStateToSteps(state, newState)]
  }

  compareTo(other:Action):number {
    return other.time - this.time
  }
}

export default Action